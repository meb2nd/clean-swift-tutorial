//
//  CreateOrderInteractor.swift
//  CleanStore
//
//  Created by Pete Barnes on 3/16/19.
//  Copyright (c) 2019 Pete Barnes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateOrderBusinessLogic {
    var shippingMethods: [String] { get }
    func formatExpirationDate(request: CreateOrder.FormatExpirationDate.Request)
    func doSomething(request: CreateOrder.Something.Request)
}

protocol CreateOrderDataStore {
    //var name: String { get set }
}

class CreateOrderInteractor: CreateOrderBusinessLogic, CreateOrderDataStore {
    
    var presenter: CreateOrderPresentationLogic?
    var worker: CreateOrderWorker?
    var shippingMethods = [
        ShipmentMethod(speed: .Standard).toString(),
        ShipmentMethod(speed: .OneDay).toString(),
        ShipmentMethod(speed: .TwoDay).toString()
    ]
    //var name: String = ""
    
    // MARK: Do something
    
    func doSomething(request: CreateOrder.Something.Request) {
        worker = CreateOrderWorker()
        worker?.doSomeWork()
        
        let response = CreateOrder.Something.Response()
        presenter?.presentSomething(response: response)
    }
    
    // MARK: Format Expiration Date
    
    func formatExpirationDate(request: CreateOrder.FormatExpirationDate.Request) {
        
        // For doesn't do anything -- may add validation logic later (e.g. date is not in the past)
        let response = CreateOrder.FormatExpirationDate.Response(date: request.date)
        presenter?.presentExpirationDate(response: response)
    }
}
