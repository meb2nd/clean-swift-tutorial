//
//  CreateOrderPresenter.swift
//  CleanStore
//
//  Created by Pete Barnes on 3/16/19.
//  Copyright (c) 2019 Pete Barnes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateOrderPresentationLogic {
    func presentExpirationDate(response: CreateOrder.FormatExpirationDate.Response)
    func presentSomething(response: CreateOrder.Something.Response)
    func presentCreatedOrder(response: CreateOrder.CreateOrder.Response)
    func presentOrderToEdit(response: CreateOrder.EditOrder.Response)
    func presentUpdatedOrder(response: CreateOrder.UpdateOrder.Response)
}

class CreateOrderPresenter: CreateOrderPresentationLogic {
    
    weak var viewController: CreateOrderDisplayLogic?
    let dateFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = .short
        dateFormatter.timeStyle = .none
        return dateFormatter
    }()
    
    // MARK: Do something
    
    func presentSomething(response: CreateOrder.Something.Response) {
        let viewModel = CreateOrder.Something.ViewModel()
        viewController?.displaySomething(viewModel: viewModel)
    }
    
    // MARK: Present Expiration Date
    
    func presentExpirationDate(response: CreateOrder.FormatExpirationDate.Response) {
        
        let date = dateFormatter.string(from: response.date)
        let viewModel = CreateOrder.FormatExpirationDate.ViewModel(date: date)
        viewController?.displayExpirationDate(viewModel: viewModel)
    }
    
    // MARK: Present Created Order
    
    func presentCreatedOrder(response: CreateOrder.CreateOrder.Response) {
        let viewModel = CreateOrder.CreateOrder.ViewModel(order: response.order)
        viewController?.displayCreatedOrder(viewModel: viewModel)
    }
    
    // MARK: Present Order to Edit
    
    func presentOrderToEdit(response: CreateOrder.EditOrder.Response) {
        let orderToEdit = response.order
        let viewModel = CreateOrder.EditOrder.ViewModel(
            orderFormFields: CreateOrder.OrderFormFields(
                firstName: orderToEdit.firstName,
                lastName: orderToEdit.lastName,
                phone: orderToEdit.phone,
                email: orderToEdit.email,
                billingAddressStreet1: orderToEdit.billingAddress.street1,
                billingAddressStreet2:
                (orderToEdit.billingAddress.street2 != nil ? orderToEdit.billingAddress.street2! : ""),
                billingAddressCity: orderToEdit.billingAddress.city,
                billingAddressState: orderToEdit.billingAddress.state,
                billingAddressZIP: orderToEdit.billingAddress.zip,
                paymentMethodCreditCardNumber: orderToEdit.paymentMethod.creditCardNumber,
                paymentMethodCVV: orderToEdit.paymentMethod.cvv,
                paymentMethodExpirationDate: orderToEdit.paymentMethod.expirationDate,
                paymentMethodExpirationDateString:
                dateFormatter.string(from: orderToEdit.paymentMethod.expirationDate),
                shipmentAddressStreet1: orderToEdit.shipmentAddress.street1,
                shipmentAddressStreet2: orderToEdit.shipmentAddress.street2
                    != nil ? orderToEdit.shipmentAddress.street2! : "",
                shipmentAddressCity: orderToEdit.shipmentAddress.city,
                shipmentAddressState: orderToEdit.shipmentAddress.state,
                shipmentAddressZIP: orderToEdit.shipmentAddress.zip,
                shipmentMethodSpeed: orderToEdit.shipmentMethod.speed.rawValue,
                shipmentMethodSpeedString: orderToEdit.shipmentMethod.toString(),
                id: orderToEdit.id,
                date: orderToEdit.date,
                total: orderToEdit.total
            )
        )
        viewController?.displayOrderToEdit(viewModel: viewModel)
    }
    
    // MARK: - Present Updated Order
    
    func presentUpdatedOrder(response: CreateOrder.UpdateOrder.Response) {
        let viewModel = CreateOrder.UpdateOrder.ViewModel(order: response.order)
        viewController?.displayUpdatedOrder(viewModel: viewModel)
    }
}
