//
//  CreateOrderRouter.swift
//  CleanStore
//
//  Created by Pete Barnes on 3/16/19.
//  Copyright (c) 2019 Pete Barnes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol CreateOrderRoutingLogic {
    func routeToListOrders(segue: UIStoryboardSegue?)
    func routeToShowOrder(segue: UIStoryboardSegue?)
}

protocol CreateOrderDataPassing {
    var dataStore: CreateOrderDataStore? { get }
}

class CreateOrderRouter: NSObject, CreateOrderRoutingLogic, CreateOrderDataPassing {
    
    weak var viewController: CreateOrderViewController?
    var dataStore: CreateOrderDataStore?
    
    // MARK: Routing
    
    //func routeToSomewhere(segue: UIStoryboardSegue?)
    //{
    //  if let segue = segue {
    //    let destinationVC = segue.destination as! SomewhereViewController
    //    var destinationDS = destinationVC.router!.dataStore!
    //    passDataToSomewhere(source: dataStore!, destination: &destinationDS)
    //  } else {
    //    let storyboard = UIStoryboard(name: "Main", bundle: nil)
    //    let destinationVC = storyboard.instantiateViewController(withIdentifier: "SomewhereViewController") as! SomewhereViewController
    //    var destinationDS = destinationVC.router!.dataStore!
    //    passDataToSomewhere(source: dataStore!, destination: &destinationDS)
    //    navigateToSomewhere(source: viewController!, destination: destinationVC)
    //  }
    //}
    
    // MARK: Navigation
    
    //func navigateToSomewhere(source: CreateOrderViewController, destination: SomewhereViewController)
    //{
    //  source.show(destination, sender: nil)
    //}
    
    func navigateToListOrders(source: CreateOrderViewController, destination: ListOrdersViewController) {
        source.navigationController?.popViewController(animated: true)
    }
    
    func navigateToShowOrder(source: CreateOrderViewController, destination: ShowOrderViewController) {
        source.navigationController?.popViewController(animated: true)
    }
    
    func routeToListOrders(segue: UIStoryboardSegue?) {
        
        if let segue = segue {
            let destinationVC = segue.destination as! ListOrdersViewController
            var destinationDS = destinationVC.router!.dataStore!
            passDataToListOrders(source: dataStore!, destination: &destinationDS)
        } else {
            let index = viewController!.navigationController!.viewControllers.count - 2
            let destinationVC = viewController?.navigationController?.viewControllers[index] as! ListOrdersViewController
            var destinationDS = destinationVC.router!.dataStore!
            passDataToListOrders(source: dataStore!, destination: &destinationDS)
            navigateToListOrders(source: viewController!, destination: destinationVC)
        }
    }
    
    func routeToShowOrder(segue: UIStoryboardSegue?) {
        
        if let segue = segue {
            let destinationVC = segue.destination as! ShowOrderViewController
            var destinationDS = destinationVC.router!.dataStore!
            passDataToShowOrder(source: dataStore!, destination: &destinationDS)
        } else {
            let index = viewController!.navigationController!.viewControllers.count - 2
            let destinationVC = viewController?.navigationController?.viewControllers[index] as! ShowOrderViewController
            var destinationDS = destinationVC.router!.dataStore!
            passDataToShowOrder(source: dataStore!, destination: &destinationDS)
            navigateToShowOrder(source: viewController!, destination: destinationVC)
        }
    }
    
    // MARK: Passing data
    
    //func passDataToSomewhere(source: CreateOrderDataStore, destination: inout SomewhereDataStore)
    //{
    //  destination.name = source.name
    //}
    
    func passDataToListOrders(source: CreateOrderDataStore, destination: inout ListOrdersDataStore) {
    
    }
    
    func passDataToShowOrder(source: CreateOrderDataStore, destination: inout ShowOrderDataStore) {
        destination.order = source.orderToEdit
    }
}
